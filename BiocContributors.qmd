---
title: "Identifying major global contributors to Bioconductor"
author: "Maria Doyle"
date: now
format:
  html:
    embed-resources: true
execute:
  message: false
  warning: false
editor: visual
---

This automates the identification and visualisation of groups (organisations) contributing (maintaining) large numbers of Bioconductor packages (\>= 15). It creates an interactive graph where each node is a package, grouped by organisation.

-   It uses the mantainer's email domain to identify organisation.

-   It filters out emails that can't be linked to an organisation such as gmail (so removes Charlotte Soneson, Mike Love, Sean Davis).

-   A better way would possibly be to use the `get_cre_orcids` in BiocPkgTools but that requires i) all Bioconductor packages to be installed ii) the maintainer to have filled out their information (e.g. organisation) in ORCID and added their ORCID id to the package DESCRIPTION file.

```{r}
library(dplyr)
library(stringr)
library(igraph)
library(visNetwork)

# Retrieve and preprocess email domain data
file <- "https://www.bioconductor.org/packages/release/bioc/VIEWS"
temp <- read.dcf(url(file))
temp_df <- as.data.frame(temp)
maintainers <- temp_df %>%
  select(Package, Maintainer) %>%
  mutate(EmailDomain = str_extract(Maintainer, "(?<=@)[^>]+"))

# Create an igraph object
graph <- graph.empty()

# Filter out packages with organisation count < 15 and excluded domains
excluded_domains <- c("gmail.com", "yahoo.com", "outlook.com", "hotmail.com", "googlemail.com", "bioconductor.org")
domain_counts <- maintainers %>%
  group_by(EmailDomain) %>%
  summarise(Count = n()) %>%
  filter(Count >= 15) %>%
  filter(!EmailDomain %in% excluded_domains)

filtered_maintainers <- maintainers %>%
  filter(EmailDomain %in% domain_counts$EmailDomain)

# Add nodes for each unique package
unique_packages <- unique(filtered_maintainers[c("Package", "EmailDomain")])
graph <- add.vertices(graph, nv = nrow(unique_packages), name = unique_packages$Package)


for (domain in unique(unique_packages$EmailDomain)) {
  packages_in_domain <- unique_packages$Package[unique_packages$EmailDomain == domain]

  if (length(packages_in_domain) > 1) {
    if (length(packages_in_domain) %% 2 == 1) { # If odd number of packages, so we don't get one package not linked to any other:
      # Split the packages, separating one from the rest
      left_out_package <- packages_in_domain[1]
      rest_of_packages <- packages_in_domain[-1]

      # Create combinations for the rest
      edges <- combn(rest_of_packages, 2)
      graph <- add_edges(graph, t(edges))

      # Pair the left out package with just the first of the rest
      graph <- add_edges(graph, c(left_out_package, rest_of_packages[1]))
    } else {
      edges <- combn(packages_in_domain, 2)
      graph <- add_edges(graph, t(edges))
    }
  }
}


# Convert the graph to a data frame for visNetwork
graph_df <- as_data_frame(graph)

# Filter out rows with package self-connections
graph_df_filtered <- graph_df %>%
  filter(from != to) %>%
  distinct()

unique_packages$id <- unique_packages$Package
unique_packages$title <- unique_packages$Package
unique_packages$group <- unique_packages$EmailDomain

# Create the network using visNetwork
visNetwork(nodes = unique_packages, edges = graph_df_filtered) %>%
  visOptions(clickToUse = FALSE) %>%
  visLegend()
```
